ActiveAdmin.register <%= name %> do

  permit_params :name, :description, :ruby_script

  form do |f|
    f.semantic_errors *f.object.errors.attribute_names
    f.inputs do
      f.input :name
      f.input :description, input_html: { rows: 5 }
      f.input :ruby_script
      f.actions
    end
  end

  action_item :execute, only: :show do
    dropdown_menu 'Execute Options' do
      item 'Execute Now', execute_now_admin_<%= name.underscore %>_path(resource)
      item 'Execute Later', execute_later_admin_<%= name.underscore %>_path(resource)
    end
  end

  member_action :execute_later do
    job = <%= name %>Job.perform_later(resource.id, <%= admin_user_method %>.id)
    redirect_to resource_path, notice: "Submitted #{job.job_id}"
  end

  member_action :execute_now do
    response.headers['Content-Type'] = 'text/event-stream'
    response.headers['Last-Modified'] = Time.now.httpdate
    <%= name %>Job.perform_live(resource.id, <%= admin_user_method %>.id) do |arg|
      response.stream.write "#{arg}\n"
    end
  ensure
    response.stream.close
  end

  member_action :execute do
    response.headers['Content-Type'] = 'text/event-stream'
    response.headers['Last-Modified'] = Time.now.httpdate

    report_run = resource.<%= report_runs %>.build(admin_user: <%= admin_user_method %>, ran_at: Time.current)

    custom_puts = proc do |arg|
      report_run.log << "#{arg}\n"
      response.stream.write "#{arg}\n"
      end
    custom_puts["Streaming Started: \n"]

    mod = Module.new do
      define_method :puts do |*args|
        args.each{ |arg| custom_puts[arg] }
        nil
      end
    end

    klass = Class.new do
      extend mod
      include mod
    end

    # ActiveRecord::Base.connected_to(role: :reading) do
    klass.class_eval(resource.ruby_script)
    klass_instance = klass.new
    raise SyntaxError, 'The provided script should implement a #perform method' unless klass_instance.respond_to?(:perform)
    raise SyntaxError, 'The provided script should implement a #output method' unless klass_instance.respond_to?(:output)
    @out = ">>>> The Script returned: #{klass_instance.perform}"

    [klass_instance.output].flatten.each do |out|
      report_run.reports.attach io: File.open(out), filename: out.path
    end

    # end
  rescue => e
    @out = ">>>> The Script failed: #{e}"
  rescue SyntaxError => e # This is an exception and should be rescued explicitly
    @out = "The provided Ruby Script contains a syntax error: #{e.message}. Kindly fix and retry. \n\n
###############################################
 B A C K T R A C E
###############################################\n\n
#{e.backtrace.join("\n")}"
  ensure
    custom_puts["#{@out}\n"]
    custom_puts["Streaming Ended. You may now close the tab.\n"]
    response.stream.close
    report_run.save!
    redirect_to admin_<%= report_runs %>_path(resource)
  end

  index do
    id_column
    column :name
    column :description
    column :created_at
    column :updated_at
    actions
  end

  show do
    code do
      div(style: 'white-space: pre') do
        resource.ruby_script
      end
    end
  end
  sidebar('Info', only: :show) do
    attributes_table do
      rows :name, :description, :created_at, :updated_at
    end
  end

  controller do
    include ActionController::Live
  end
end
